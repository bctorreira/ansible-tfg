---
- hosts: all
  gather_facts: no
  remote_user: user
  tasks:
  # ansible_port can change throughout this role, keep a copy around
    - name: Set configured port fact
      ansible.builtin.set_fact:
        configured_port: "{{ ansible_port }}"

    # From localhost, check if we're able to reach {{ inventory_hostname }} on
    # port 22
    - name: Check if we're using the default SSH port
      ansible.builtin.wait_for:
        port: "22"
        state: "started"
        host: "{{ inventory_hostname }}"
        connect_timeout: "5"
        timeout: "10"
      delegate_to: "localhost"
      ignore_errors: yes
      register: default_ssh
      become: no

    # If reachable, continue the following tasks with this port
    - name: Set inventory ansible_port to default
      ansible.builtin.set_fact:
        ansible_port: "22"
      when: default_ssh is defined and
            default_ssh.state is defined and
            default_ssh.state == "started"
      register: ssh_port_set

    # If unreachable on port 22, check if we're able to reach
    # {{ inventory_hostname }} on {{ ansible_port }} provided by the inventory
    # from localhost
    - name: Check if we're using the inventory-provided SSH port
      ansible.builtin.wait_for:
        port: "{{ ansible_port }}"
        state: "started"
        host: "{{ inventory_hostname }}"
        connect_timeout: "5"
        timeout: "10"
      delegate_to: "localhost"
      ignore_errors: yes
      register: configured_ssh
      when: default_ssh is defined and
            default_ssh.state is undefined
      become: no

    # If {{ ansible_port }} is reachable, we don't need to do anything special
    - name: SSH port is configured properly
      ansible.builtin.debug:
        msg: "SSH port is configured properly"
      when: configured_ssh is defined and
            configured_ssh.state is defined and
            configured_ssh.state == "started"
      register: ssh_port_set

    # If the SSH port is neither the default or the configured, give up.
    - name: Fail if SSH port was not auto-detected (unknown)
      ansible.builtin.fail:
        msg: "The SSH port is neither 22 or {{ ansible_port }}."
      when: ssh_port_set is undefined

    # Install the user key in the servers
    - name: Install user keys
      ansible.posix.authorized_key:
        user: user
        state: present
        key: "{{ lookup('file', '../keys/user.pub') }}"

    # Sanity check, make sure Ansible is able to connect to the host
    - name: Confirm host connection works (playbook will fail if ssh already configured)
      ansible.builtin.ping:

    - name: Setup alternate SSH port
      ansible.builtin.lineinfile:
        dest: "/etc/ssh/sshd_config"
        regexp: "^Port"
        line: "Port {{ configured_port }}"

    - name: Prohibit root login
      ansible.builtin.lineinfile:
        dest: "/etc/ssh/sshd_config"
        regexp: "^PermitRootLogin"
        line: "PermitRootLogin no"

    - name: Ingore user known hosts
      ansible.builtin.lineinfile:
        dest: "/etc/ssh/sshd_config"
        regexp: "^IgnoreUserKnownHosts"
        line: "IgnoreUserKnownHosts yes"

    - name: Prohibit X11 forwarding
      ansible.builtin.lineinfile:
        dest: "/etc/ssh/sshd_config"
        regexp: "^X11Forwarding"
        line: "X11Forwarding no"

    - name: Add ansible user
      ansible.builtin.user:
        name: ansible
        password: "{{ vault_ansible_password }}"
        comment: The Ansible task execution user
        groups: sudo
        append: yes
        shell: /bin/bash
        state: present
      no_log: yes

    # Authorizes users whose public keys are specified in the
    # `group_vars/all/authorized_key_files` file to run playbooks
    # in the managed node as the ansible user
    - name: Set authorized keys for ansible user
      ansible.posix.authorized_key:
        user: ansible
        state: present
        key: "{{ item }}"
      with_file: "{{ authorized_key_files }}"

    - name: Restart sshd service
      ansible.builtin.service:
        name: sshd
        state: restarted
